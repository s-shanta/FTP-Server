/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

/**
 *
 * @author PC
 */

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class Work extends javax.swing.JFrame {

    /**
     * Creates new form Work
     */
    
    Socket soc;
    String name;
    DataInputStream din;
    DataOutputStream out;
    String dir = System.getProperty("user.dir");
    String curDir;
    
    public Work(Socket soc, String name) {
        initComponents();
        this.soc = soc;
        this.name = name;
        curDir = dir + "\\" + this.name;
        showWork(curDir);
        /*File user = new File(name);
        File[] arr = user.listFiles();
                for(File x : arr){
                    //System.out.println(x);
                    if(x.isFile()){
                        jTextArea.setText(jTextArea.getText().trim() + '\n' + x.getName());
                    }
                    else if (x.isDirectory()){
                        jTextArea.setText(jTextArea.getText().trim() + '\n' + "Directory : " + x.getName());
                    }
                }*/
    }
    
    public Work() {
        initComponents();
    }
    
    void showWork(String path) {
        File user = new File(path);
        File[] arr = user.listFiles();
        for (File x : arr) {
            //System.out.println(x);
            if (x.isFile()) {
                jTextArea.setText(jTextArea.getText().trim() + '\n' + x.getName());
            } else if (x.isDirectory()) {
                jTextArea.setText(jTextArea.getText().trim() + '\n' + "Directory : " + x.getName());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jButtonUpload = new javax.swing.JButton();
        jButtonDownload = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        jButtonUpload.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonUpload.setText("Upload");
        jButtonUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadActionPerformed(evt);
            }
        });

        jButtonDownload.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonDownload.setText("Download");
        jButtonDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadActionPerformed(evt);
            }
        });

        jButtonLogout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonLogout.setText("Log out ");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jButtonUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jButtonDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser jfile = new JFileChooser();
        int num = jfile.showSaveDialog(null);
        if (num == JFileChooser.APPROVE_OPTION) {
            String filePath = jfile.getSelectedFile().getAbsolutePath();
            String[] newFile = filePath.split("\\\\");
            System.out.println(filePath);
            int len = newFile.length;
            try {
                out = new DataOutputStream(soc.getOutputStream());
                out.writeBytes("upload#" + filePath + "#" + newFile[len - 1] + "#" + curDir + '\n');
                din = new DataInputStream(soc.getInputStream());
                String val3 = din.readLine();
                if (val3.equals("Uploaded")) {
                    int input3 = JOptionPane.showOptionDialog(null, "File is uploaded", "", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
                    if (input3 == JOptionPane.OK_OPTION || input3 == JOptionPane.NO_OPTION || input3 == JOptionPane.CLOSED_OPTION) {
                        jTextArea.setText(null);
                        showWork(curDir);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "File is not uploaded");
                }
            } catch (IOException ex) {
                Logger.getLogger(Work.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonUploadActionPerformed

    private void jButtonDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadActionPerformed
        // TODO add your handling code here:
        JFileChooser jfile = new JFileChooser(curDir);
        int num = jfile.showSaveDialog(null);
        if (num == JFileChooser.APPROVE_OPTION){
            String filePath = jfile.getSelectedFile().getAbsolutePath();
            String[] newFile = filePath.split("\\\\");
            int len = newFile.length;
            String destInput = JOptionPane.showInputDialog(this, "Enter destination for downloading");
            //System.out.println(destInput);
            if(destInput.equals("")){
                JOptionPane.showMessageDialog(this, "Invalid Location");
            }
            else{
                try {
                    out = new DataOutputStream(soc.getOutputStream());
                    out.writeBytes("download#" + filePath + "#" + destInput +"\\"+newFile[len-1] +'\n');
                    din = new DataInputStream(soc.getInputStream());
                    String val5 = din.readLine();
                    if (val5.equals("Downloaded")){
                        JOptionPane.showMessageDialog(this, "Download Complete");
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Download Failed");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Work.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButtonDownloadActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            out = new DataOutputStream(soc.getOutputStream());
            out.writeBytes("logout" + '\n');
            din = new DataInputStream(soc.getInputStream());
            String val4 = din.readLine();
            if (val4.equals("Closing connection")) {
                soc.close();
                System.exit(0);
            }
        } catch (IOException ex) {
            Logger.getLogger(Work.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Work().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDownload;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables
}
